on:
  workflow_call:
    inputs:
      environment:
        type: string
    secrets:
      access_key_id:
        required: true
      secret_access_key:
        required: true
      endpoint_url:
        required: true
      bucket:
        required: true

jobs:
  plan:
    runs-on: ubuntu-22.04
    permissions: { id-token: write, contents: read }
    container:
      image: ockawin/v1-app-infra-ci:edge-amd64
      options: --pid host --ipc host
    defaults:
      run: { shell: sh }
    outputs:
      exit_code: ${{ steps.plan.outputs.exit_code }}
    steps:
      - run: echo ${{ inputs.environment }}

      - name: Prepare AWS
        run: |
          mkdir ~/.aws
          echo "[default]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "s3 =" >> ~/.aws/config
          echo "    signature_version = s3v4" >> ~/.aws/config
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Checkout repository
        run: |
          chown root:root .
          git init
          git remote add origin "https://oauth:${{ github.token }}@github.com/${{ github.repository }}.git"
          git fetch origin --depth=1 ${{ github.ref }}
          git reset --hard FETCH_HEAD

      - name: Prepare Terraform to use cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache

      - name: Setup Terraform Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init

      # - name: Dummy Import to test no changes
      #   run: terraform import random_password.password asdfasdfasdfasdf

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -out=tfplan --detailed-exitcode \
            && EXIT_CODE=$? || EXIT_CODE=$?

          # @see https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
          # 0 = Succeeded with empty diff (no changes)
          # 1 = Error
          # 2 = Succeeded with non-empty diff (changes present)

          echo "exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"

          if [ "$EXIT_CODE" -eq 1 ] || [ "$EXIT_CODE" -ge 3 ]; then
            >&2 echo "Error: terraform plan failed"
            exit 1
          fi

      - name: Prepare job summary
        run: |
          (
            echo "# ${{ inputs.environment }}: Terraform Plan";
            echo '```';
            terraform show -no-color tfplan;
            echo '```';
          ) >> "$GITHUB_STEP_SUMMARY"

      - name: Upload tfplan to S3
        if: steps.plan.outputs.exit_code == 2
        run: |
          touch tfplan.tar.gz
          tar -czf tfplan.tar.gz --exclude tfplan.tar.gz --exclude .git --exclude .github ./
          alias aws='aws --endpoint-url ${{ secrets.ENDPOINT_URL }}'
          aws s3 cp tfplan.tar.gz s3://${{ secrets.BUCKET }}/${{ github.repository }}/${{ github.sha }}-${{ inputs.environment }}.tar.gz

  apply:
    needs: plan
    if: needs.plan.outputs.exit_code == 2
    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    container:
      image: ockawin/v1-app-infra-ci:edge-amd64
      options: --pid host --ipc host
    defaults:
      run: { shell: sh }
    steps:
      - run: echo ${{ inputs.environment }}

      - name: Prepare AWS
        run: |
          mkdir ~/.aws
          echo "[default]" >> ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          echo "s3 =" >> ~/.aws/config
          echo "    signature_version = s3v4" >> ~/.aws/config
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Checkout repository
        run: |
          chown root:root .
          git init
          git remote add origin "https://oauth:${{ github.token }}@github.com/${{ github.repository }}.git"
          git fetch origin --depth=1 ${{ github.ref }}
          git reset --hard FETCH_HEAD

      - name: Prepare Terraform to use cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache

      - name: Setup Terraform Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Pull tfplan from S3
        run: |
          alias aws='aws --endpoint-url ${{ secrets.ENDPOINT_URL }}'
          aws s3 cp s3://${{ secrets.BUCKET }}/${{ github.repository }}/${{ github.sha }}-${{ inputs.environment }}.tar.gz tfplan.tar.gz
          tar xf tfplan.tar.gz

      - name: Terraform Init
        run: terraform init

      - name: Terraform Show
        run: terraform show tfplan

      - name: Terraform Apply
        run: |
          (
            echo "# ${{ inputs.environment }}: Terraform Apply";
            echo '```';
            terraform apply -auto-approve -no-color tfplan;
            echo '```';
          ) | tee "$GITHUB_STEP_SUMMARY"

# @todo use color for step summary (convert to latex color markdown)
# @todo cancel old jobs on new push